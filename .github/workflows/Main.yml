name: Windows RDP Tunnel with ngrok (Inline Token)

on:
  # Allows manual execution from the GitHub Actions tab
  workflow_dispatch:

jobs:
  rdp_tunnel:
    runs-on: windows-latest
    
    steps:
      - name: Enable RDP and Set Password
        shell: powershell
        run: |
          # 1. Enable RDP service
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
          
          # 2. Open firewall for RDP (default port 3389)
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          
          # 3. Create a dedicated user/password for RDP
          net user runneradmin "MySecurePass123" 
          
          # Print connection credentials
          echo "Username: runneradmin"
          echo "Password: MySecurePass123"
          echo "RDP Service is ready on port 3389"

      # ----------------------------------------------------
      #  NGROK TUNNEL SETUP
      # ----------------------------------------------------
      - name: Download and Unzip ngrok
        shell: powershell
        run: |
          # Download ngrok for Windows (64-bit)
          wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
          
          # Unzip the downloaded file
          Expand-Archive ngrok.zip -DestinationPath .

      - name: Authenticate ngrok
        shell: powershell
        run: |
          # ðŸ”´ CRITICAL: REPLACE THE PLACEHOLDER BELOW with your actual ngrok authtoken.
          .\ngrok.exe authtoken 33HpBIgSbFICtuzGqCKopz11ZDb_eGr4t95nKnkkjujyHD2P

      - name: Start ngrok TCP tunnel for RDP
        shell: powershell
        run: |
          # Start ngrok to tunnel the RDP port (3389) in the background
          Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp 3389"
          
          # Give ngrok a few seconds to start and establish the tunnel
          Start-Sleep -Seconds 10 
          
      - name: Get and Print ngrok Tunnel URL
        id: ngrok_info
        shell: powershell
        run: |
          # Query ngrok's local API (http://localhost:4040) to get the public URL
          $tunnel_info = Invoke-RestMethod http://localhost:4040/api/tunnels
          $tunnel_url = $tunnel_info.tunnels[0].public_url
          
          # Output the RDP connection string clearly in the log
          echo "********************************************************"
          echo "âœ… RDP Connection Ready"
          echo "RDP Address: $tunnel_url"
          echo "Username: runneradmin"
          echo "Password: MySecurePass123"
          echo "********************************************************"
          
          # Use ::error:: to make the final address highly visible in the GitHub Actions summary log
          echo "::error::RDP Address: $tunnel_url"

      - name: Keep Runner Alive
        shell: powershell
        run: |
          Write-Host "Keeping the runner alive for 60 minutes (3600 seconds). Connect to the RDP address shown above now!"
          # This prevents the job from finishing immediately.
          Start-Sleep -Seconds 3600 
          
